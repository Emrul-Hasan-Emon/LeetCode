class Solution {
public:
    typedef pair<int, int> pi;
    map<int, vector<int> >m;
    
    void answer(vector<int>&a, vector<int>&dis)
    {
        priority_queue<pi, vector<pi>, greater<pi> > q;
        q.push({0, 0});
        dis[0]=0;
        
        while(!q.empty())
        {
            pair<int, int>p=q.top();
            q.pop();
            
            int x=p.first;
            int y=p.second;
            
          //  cout<<x<<" "<<y<<endl;
            
            if(y+1<a.size() and dis[y+1]>dis[y]+1)
            {
                dis[y+1]=dis[y]+1;
                q.push({dis[y+1], y+1});
            }
            if(y-1>=0 and dis[y-1]>dis[y]+1)
            {
                dis[y-1]=dis[y]+1;
                q.push({dis[y-1], y-1});
            }
            
        
            for(int pos=0; pos<m[a[y]].size(); pos++)
            {
                int p=m[a[y]][pos];
                if(dis[p]>dis[y]+1)
                {
                    dis[p]=dis[y]+1;
                    q.push({dis[p], p});
                }
            }
            m[a[y]].clear();
        }
    }
    
    int minJumps(vector<int>& arr) {
        int n=arr.size(), i, j, k, l;
        vector<int>dis(n), vis(n);
        
        for(i=0; i<n; i++)
        {
            dis[i]=n+5;
            m[arr[i]].push_back(i);
        }
        
        answer(arr, dis);
        
        return dis[n-1];
    }
};
