class Solution {
public:
    bool hobe(int m, string s)
    {
        int f=0;
        for(int i=0; i<=s.size()-m; i++)
        {
            string t=s.substr(i, m);
            int x=0, y=t.size()-1;
            while(x<y)
            {
                if(t[x]!=t[y])
                    break;
                x++; y--;
            }
            if(x>=y)
                f++;
        }
        return f!=0;
    }
    
    string longestPalindrome(string s) {
        int l, r, i, m, ans=1;
        
        l=1; r=s.size();
        while(l<=r)
        {
            m=(l+r)/2;
            bool f=hobe(m, s);
            if(f)
                ans=m, l=m+1;
            else
            {
                if(m+1<=s.size() and hobe(m+1, s))
                    ans=m+1, l=m+1;
                else
                    r=m-1;
            }
        }
        
        for(i=0; i<=s.size()-ans; i++)
        {
            string t=s.substr(i, ans);
            int x=0, y=ans-1;
            while(x<y)
            {
                if(t[x]!=t[y])
                    break;
                x++; y--;
            }
            if(x>=y)
                return t;
        }
        return "";
    }
};
